{"version":3,"sources":["utils/gamsUtils.ts","components/common/GamsWidget/DataProvider/index.tsx","components/common/GamsWidget/WidgetDefProvider/index.tsx","components/common/GamsWidget/index.tsx","components/common/LocalStorageApplier/index.tsx","components/common/StorageSelect/index.tsx","components/common/SelectFormGroup/index.tsx","components/common/StorageInput/index.tsx","components/common/TextFormGroup/index.tsx","components/common/Autocomplete/index.tsx","utils/utils.ts","utils/navigation.ts","components/common/ResponsiveForm/index.tsx","components/App/QueryBuilder/index.tsx","components/App/TripleForm/index.tsx","components/App/index.tsx","index.tsx"],"names":["getCurrentPid","path","window","location","pathname","includes","index","indexOf","slashIndex","slice","length","copyDeep","value","JSON","parse","stringify","DataProvider","widgetDef","setWidgetData","React","useEffect","lifecycle","dataSourcesSpec","console","debug","a","sources","forEach","source","dataSource","checkDataSource","error","gamsDigitalObj","pid","reqUrlStart","origin","reqUrlFull","datastream","service","contentModel","fetch","then","resp","json","widgetDefCopy","data","catch","err","definedProps","Object","values","filter","val","info","WidgetDefProvider","setDefinition","undefined","children","globalPropName","objectPidRef","reqPid","curPid","abbr","doublePointIndex","pointIndex","getProjectAbbr","requestUrl","text","e","dummyDef","name","GamsWidget","WidgetDataProvider","useState","setWidgetDef","refinedWidgetData","setRefinedWidgetData","Children","only","TypeError","cloneElement","Component","props","LocalStorageApplier","storageKey","onChange","storageVal","localStorage","getItem","setItem","StorageSelect","options","localStorageKey","placeHolder","prepend","properties","className","id","evt","currentTarget","key","disabled","hidden","label","map","option","SelectFormGroup","filtered","_selected","selectedVal","setSelectedVal","handleSelection","matched","useLocaleStorage","required","small","StorageInput","TextFormGroup","setValue","type","placeholder","AutoComplete","autoCompleteOption","onchange","typedIn","setTypedIn","suggestions","setSuggestions","getSuggestions","typedValue","inputValue","trim","toLowerCase","inputLength","lang","obj","inputProps","event","newValue","onSuggestionsFetchRequested","newSugs","Array","from","onSuggestionsClearRequested","getSuggestionValue","suggestion","renderSuggestion","typedInLength","style","color","substring","renderInputComponent","borderBottom","selObj","border","navigationUtils","clear","reload","ResponsiveForm","restPathGroups","inputIsValid","setInputFields","handleSearch","loading","searchBtns","onFormGroupChange","selectInput","formGroupsCopy","zimUtils","select","runtimeValidateSelect","isArray","formOpacity","setFormOpacity","opacity","interval","setInterval","clearInterval","pathVarGroup","formGroups","input","textInput","inputFieldsIntern","keyId","generateTextFormGroup","inputGroups","generateSelectFormGroup","Autocomplete","Math","random","generateAutoCompleteFormGroup","onClick","searchText","preventDefault","resetText","visibility","role","QueryBuilder","queryStart","query","paramDelimiter","encodeURIComponent","TripleFormReact","setQuery","queryInputs","setInputs","setInputIsValid","setLoading","gui","params","parameterDelimiter","restVargroup","restPathVariable","queryInput","inputObjIndex","parameter","inputObj","restPathGroup","formGroup","oneIsTrue","btnClickEvent","alert","url","href","encodeURI","TripleFormWidget","TripleForm","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e181e5a1.chunk.js","sourcesContent":["\r\n\r\n\r\n/**\r\n * Returns the current Digital Object's PID on GAMS\r\n * via reading out the pathname property. \r\n * @returns pid as string.\r\n */\r\nexport const getCurrentPid = (): string => {\r\n\r\n  let path = window.location.pathname;\r\n  let fedoraObjExpr = \"/archive/objects/\";\r\n\r\n  if(path.includes(fedoraObjExpr)){\r\n    let index = path.indexOf(fedoraObjExpr);\r\n    path = path.slice(index + fedoraObjExpr.length, path.length);\r\n    let slashIndex = path.indexOf(\"/\");\r\n    // pid already available \r\n    if (slashIndex === -1) return path;\r\n    return path.slice(0,slashIndex);\r\n    \r\n  //when no archive/objects before  \r\n  } else {\r\n    path = path.slice(1,path.length); //remove first '/'\r\n    let slashIndex = path.indexOf(\"/\");\r\n\r\n    // in case no further path specification\r\n    // rest params etc. would not be inside window.location.pathname.\r\n    if(slashIndex === -1) return path;\r\n    return path = path.slice(0, slashIndex);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Returns value of the 'locale' RestPathVariable. \r\n * If not set returns 'de' by default.\r\n * @param localeDefault locale value to be returned when no value is set in url.\r\n * @returns value of locale Rest variable. If not set \r\n * returns 'de' as default value. \r\n */\r\nexport const getLocale = (localeDefault: string = \"de\") => {\r\n  let locale = getRestParam(\"locale\")\r\n  return locale ? locale : localeDefault;\r\n}\r\n\r\n/**\r\n * Uses URL API to read out given RestPathVariable.\r\n * @param Name of the parameter\r\n * @returns Value of RestPathVariable. \r\n */\r\nexport const getRestParam = (paramName: string) => {\r\n  let url = new URL(window.location.href);\r\n  let params = new URLSearchParams(url.searchParams);\r\n  let param = params.get(paramName)\r\n  return param;\r\n}\r\n\r\n/**\r\n * Uses setRestParam to set 'locale' RestPathVariable to given value.\r\n * @param langVal Value 'locale' should have.\r\n */\r\nexport const setLocale = (langVal: string) => {\r\n  setRestParam(\"locale\", langVal);\r\n}\r\n\r\n/**\r\n * Sets specified RestPathVariable to given value \r\n * and sends client to the new url.\r\n * @param paramName Name of RestPathVariable to be set.\r\n * @param value New value for the RestPathVariable.\r\n */\r\nexport const setRestParam = (paramName: string, value: string): void => {\r\n  let url = new URL(window.location.href);\r\n  url.searchParams.set(paramName, value);\r\n  window.location.href = url.href;\r\n}\r\n\r\n/**\r\n * Uses JSON.parse and JSON.stringify to generate \r\n * a deep copy of given value.\r\n * @param {Object | Array<any>} value Object or Array to copy deep.\r\n * @returns {Object | Array<any>} deep copy of given Object or Array.\r\n */\r\nexport const copyDeep = (value: Object | Array<any>) => {\r\n  return JSON.parse(JSON.stringify(value));\r\n}\r\n\r\n\r\n/**\r\n * Uses getCurrentPid() to retrieve client's current visibile project abbreviation.\r\n * e.g. o:derla.vor will return \"derla\" OR o:cantus.regensburg will return \"cantus\".\r\n * @param curPid Client's current visible pid to analyze. Reads out current project's pid\r\n * by default.\r\n * @returns client's visible project abbreviation in the url.\r\n */\r\nexport const getProjectAbbr = (curPid = getCurrentPid()) => {\r\n  let abbr = \"\";\r\n  let doublePointIndex = curPid.indexOf(\":\");\r\n  abbr = curPid.slice(doublePointIndex + 1, curPid.length); \r\n\r\n  let pointIndex = abbr.indexOf(\".\");\r\n\r\n  if(pointIndex===-1){\r\n    return abbr\r\n  } else {\r\n    return abbr.slice(0, pointIndex);\r\n  };\r\n}","import React from \"react\";\r\nimport { WidgetDataProviderProps, GamsWidgetDataSource, GamsWidgetType } from \"..\";\r\nimport { getCurrentPid, copyDeep } from \"../../../../utils/gamsUtils\";\r\n\r\n\r\nconst DataProvider: React.FC<WidgetDataProviderProps> = ({ widgetDef, setWidgetData }) => {\r\n\r\n  React.useEffect(() => {\r\n    widgetDef.lifecycle = widgetDef.lifecycle ? widgetDef.lifecycle : \"develop\"; \r\n    let lifecycle = widgetDef.lifecycle;\r\n\r\n    // when no dataSpec -> assuming none necessary.\r\n    //@ts-ignore\r\n    if(widgetDef.dataSourcesSpec){\r\n      //fetch data according to dataSpec\r\n      if(lifecycle === \"develop\") console.debug(\"GamsWidget-DataProvider: dataSourceSpecification provided for the widget: \", widgetDef);\r\n\r\n      //async IIFE to await + load + merge of data when multiples\r\n      (async () => {\r\n        // simultaneously fetch data - and then await merge?\r\n        // own method that can be awaited\r\n        \r\n        //@ts-ignore\r\n        //let reqCount: number = widgetDef.dataSpec.length;\r\n        //let reqCompletedCounter: number = 0;\r\n        \r\n        //@ts-ignore (is ok although dataSpec must be defined)\r\n        widgetDef.dataSourcesSpec.sources.forEach(source => {\r\n          \r\n\r\n\r\n\r\n\r\n        });\r\n\r\n\r\n      })();\r\n\r\n\r\n      //TODO -> loop over all data specs. (not only the first)\r\n      //TODO -> currently only supports json!\r\n      //atm take only first data spec into account\r\n      let dataSource = widgetDef.dataSourcesSpec.sources[0];\r\n      if(!checkDataSource(dataSource))return console.error(\"GamsWidget-DataProvider: Validation of data source object failed. Aborting operations: \", dataSource);\r\n      \r\n      \r\n      //when dataSource is a digital object.\r\n      //following code clause build the correct \"request url\"\r\n      if(dataSource.gamsDigitalObj){\r\n\r\n        // build \"first part\" of url first according to pid definition.\r\n        let pid = dataSource.gamsDigitalObj.pid ? dataSource.gamsDigitalObj.pid : getCurrentPid();\r\n        let reqUrlStart = `${window.location.origin}/archive/objects/${pid}`;\r\n        let reqUrlFull = '';\r\n\r\n        // both defined doesn't make any sense.\r\n        if(dataSource.gamsDigitalObj.datastream && dataSource.gamsDigitalObj.service)return console.error(\"GamsWidget-DataProvider: Got a dataSource object where both a datastream and a service is defined. Please make sure to define either one: \", dataSource);\r\n\r\n        //first case of datastreams (same in every case)\r\n        if(dataSource.gamsDigitalObj.datastream){\r\n          reqUrlFull = reqUrlStart + `/datastreams/${dataSource.gamsDigitalObj.datastream}/content`;\r\n\r\n          // case of service should be called.\r\n        } else {\r\n          \r\n          // call standard service or specified one specific for content model\r\n          switch(dataSource.gamsDigitalObj.contentModel){\r\n            case \"GML\":\r\n              reqUrlFull = reqUrlStart + `/methods/sdef:GML/${dataSource.gamsDigitalObj.service ? dataSource.gamsDigitalObj.service : \"getJSON\"}`;\r\n              break;\r\n            case \"TEI\":\r\n              reqUrlFull = reqUrlStart + `/methods/sdef:TEI/${dataSource.gamsDigitalObj.service ? dataSource.gamsDigitalObj.service : \"get\"}`;\r\n              break;\r\n            case \"Context\":\r\n              reqUrlFull = reqUrlStart + `/methods/sdef:Context/${dataSource.gamsDigitalObj.service ? dataSource.gamsDigitalObj.service : \"get\"}`;\r\n              break;\r\n            case \"Query\":\r\n              reqUrlFull = reqUrlStart + `/methods/sdef:Query/${dataSource.gamsDigitalObj.service ? dataSource.gamsDigitalObj.service : \"getJSON\"}`;\r\n              break;\r\n            default:\r\n              return console.error(\"GamsWidget-DataProvider: Unsupported-ContentModel-Error at building the request url for specified content model: \", dataSource.gamsDigitalObj.contentModel, dataSource);\r\n          }\r\n\r\n        }\r\n\r\n        // when request url correctly built for gamsObject -> start fetch.\r\n        if(lifecycle === \"develop\") console.debug(\"GamsWidget-DataProvider: Sending request for widget data to the dataspecification to: \", reqUrlFull);\r\n        fetch(reqUrlFull).then(resp => {\r\n          resp.json().then(json => {\r\n            let widgetDefCopy: GamsWidgetType = copyDeep(widgetDef);\r\n            widgetDefCopy.data = json;\r\n            if(lifecycle === \"develop\") console.debug(\"GamsWidget-DataProvider: Succesfully got data - setting now data property of widget definition. Got data: \", json);\r\n            setWidgetData(widgetDefCopy);\r\n          }).catch(err => {\r\n            console.error(\"GamsWidget-DataProvider: Error parsing data as JSON from datasource: \", dataSource);\r\n            console.error(err);\r\n          });\r\n          \r\n        }).catch(err => {\r\n            console.error(\"GamsWidget-DataProvider: Error getting data from url: \", reqUrlFull);\r\n            console.error(err);\r\n        });\r\n\r\n      } \r\n\r\n\r\n\r\n    } else {\r\n      if(lifecycle === \"develop\") console.debug(\"GamsWidget-DataProvider: No data provided for the widget - Assuming not needed for widget definition: \", widgetDef);\r\n      setWidgetData(copyDeep(widgetDef));\r\n    }\r\n  }, [ widgetDef, setWidgetData ]);\r\n\r\n  return null\r\n\r\n}\r\n\r\nexport default DataProvider;\r\n\r\n\r\n\r\n\r\n/**\r\n * Checks if exactly one property of given GamsWidgetDataSource object is defined.\r\n *@param dataSource GamsWidgetDataSource object to be validated. \r\n *@returns True if exactly one property is defined. False if none or multiple are defined.\r\n */\r\nconst checkDataSource = (dataSource: GamsWidgetDataSource): boolean => {\r\n  // adds all properties validated to true to the array.\r\n  let definedProps = Object.values(dataSource).filter(val => val ? val : false);\r\n  if(definedProps.length === 1){\r\n    console.info(\"GamsWidget-DataProvider: Validation of Datasource successfull: \", dataSource);\r\n    return true;\r\n  } else if(definedProps.length === 0){\r\n    console.error(\"GamsWidget-DataProvider: All properties of given DataSource validated false. Please make sure to assign one correct property to the given datasource object: \", dataSource);\r\n    return false;\r\n  } else {\r\n    console.error(\"GamsWidget-DataProvider: More than one property is defined in given datasource. Make sure to define only one: \", dataSource);\r\n    return false;\r\n  }  \r\n}\r\n\r\n\r\n\r\nexport const harvestFeatures = (\r\n  urls: string[],\r\n): Object => {\r\n  if (urls.length === 0)\r\n    throw new RangeError(\r\n      \"Only arrays greater than length 0 are valid for the harvestPersons function.\"\r\n    );\r\n\r\n  // array of Promises\r\n  // fetch and parse as json\r\n  let respsPromises = urls.map(url => fetch(\"url\").then(resp => resp.json())); \r\n\r\n  // resolve all promises\r\n  // coming from \r\n  Promise.all(respsPromises).then(values => {\r\n\r\n    //merge array of json objects to one -> difficult if datatype is not known!\r\n    //best to merge on feature level?\r\n\r\n\r\n  }).catch(err => console.error(err));\r\n\r\n\r\n  return respsPromises\r\n  \r\n};","import React from \"react\";\r\nimport { getCurrentPid, getProjectAbbr } from \"../../../../utils/gamsUtils\";\r\nimport { GamsWidgetType } from \"../index\"\r\nimport { WidgetDefProviderProps } from \"..\"\r\n\r\n// Extends WidgetDefProviderProps so that additional \r\n// props can be passed down (on level of <GamsWidget/> call)\r\n// can only be optional properties.\r\ninterface GAMSWidgetDefProps extends WidgetDefProviderProps {\r\n  globalPropName?: string;\r\n  datastream?: string;\r\n  objectPidRef?: \"context\";   // if set to undefined -> assuming current object? via datastream?\r\n                           // widget's that are configured by one specific object?\r\n                           // like a context object.  \r\n}\r\n\r\n/**\r\n * Component checks if and where the global config object was assigned and\r\n * sets state of parent component. (for the configuration / basal widget definition).\r\n * globalProp overwrites datastream -> objectPidRef overwrites default behavior of reqeuesting client's\r\n * current object's pid.\r\n * @param globalPropName Name of the property of the global window object where the widget definition could be held.\r\n * @param datastream Name of datastream where the widget definition could be.\r\n * @param objectPidRef Pid of object from where the widget definition should be requested.\r\n */\r\nconst WidgetDefProvider: React.FC<GAMSWidgetDefProps> = ({\r\n  setDefinition = undefined, \r\n  children = undefined,\r\n  globalPropName,\r\n  datastream,     \r\n  //maybe best to set object reference to \"managed content\" | \"reference\" | \"x\" ? like in cirillo?\r\n  // or contextObject with datastream?\r\n  // or service to call\r\n  objectPidRef\r\n}) => {\r\n  React.useEffect(() => {\r\n    if (!setDefinition) return;\r\n\r\n    // configured window object validates true\r\n    if(window[globalPropName as any]){\r\n      return setDefinition(window[globalPropName as any]);\r\n    } \r\n    \r\n    // window object not defined\r\n    // try to fetch for GUI def in datastream\r\n    // first assign PID.\r\n\r\n    // when ne objectPidRef is set to context assign\r\n    // the context pid\r\n    let reqPid = (objectPidRef === \"context\") ? `context:${getProjectAbbr()}` : getCurrentPid();\r\n\r\n    if(datastream){ \r\n      let requestUrl = `${window.location.origin}/archive/objects/${reqPid}/datastreams/${datastream}/content`  \r\n      // fetch object's widget datastream\r\n      fetch(requestUrl).then(data => {\r\n        data.text().then(text => {\r\n          try {\r\n            console.debug(\"GamsWidget-WidgetDefinitionProvider: No window-object definition provided. Defaulted to requesting current object's datastream at url: \", requestUrl);\r\n            setDefinition(JSON.parse(text));\r\n          } catch(e){\r\n            //parse xml to JSON via lib best?\r\n          }\r\n        }).catch(err => {\r\n          console.error(\"GamsWidget- WidgetDefProvider: Error stringifying the datastream at: \", requestUrl);\r\n          console.error(err);\r\n        });\r\n      }).catch(err => {\r\n        console.error(\"GamsWidget- WidgetDefProvider: Error at getting widget definition from url: \", requestUrl);\r\n        console.error(err);\r\n      })\r\n    } else {\r\n      console.error(\"GamsWidget- WidgetDefProvider: No global window property nor datastream defined for retrieving the widget's definition. Returning dummy-definition instead. (But the app might crash).\");\r\n      let dummyDef: GamsWidgetType  = {\r\n        name:\"Dummy-Test Widget\",\r\n        lifecycle:\"develop\"        \r\n      }\r\n      console.error(\"GamsWidget- WidgetDefProvider: Set dummy definition: \", dummyDef);\r\n      setDefinition(dummyDef);    \r\n    }\r\n\r\n  }, [setDefinition, globalPropName, datastream, objectPidRef]);\r\n\r\n  return children ? children : null;\r\n};\r\n\r\nexport default WidgetDefProvider;\r\n","import React from \"react\";\r\nimport DefaultDataProvider from \"./DataProvider\";\r\nimport DefaultWidgetDefProvider from \"./WidgetDefProvider\";\r\n\r\nexport interface GAMSWidgetProps {\r\n  widgetDef?: GamsWidgetType;\r\n}\r\n\r\n/**\r\n * Definition of props for the WidgetDefProvider.\r\n * The component must set the GamsWidget's widgetDefinition state\r\n * somehow / somewhere. (btw by default GamsWidget uses a component specific to GAMS\r\n * that can be imported from here)\r\n */\r\nexport interface WidgetDefProviderProps {\r\n  setDefinition?: React.Dispatch<\r\n    React.SetStateAction<GamsWidgetType | undefined>\r\n  >;\r\n  [property: string]: any;\r\n  children?: any;\r\n}\r\n\r\n/**\r\n * Definition of props for the WidgetDataProvider.\r\n * The component must set the GamsWidget's widgetData state\r\n * somehow / somewhere. (btw by default GamsWidget uses a component specific to GAMS\r\n * that can be imported from here)\r\n */\r\nexport interface WidgetDataProviderProps {\r\n  widgetDef: GamsWidgetType;\r\n  setWidgetData: React.Dispatch<React.SetStateAction<any>>;\r\n  children?: any;\r\n}\r\n\r\ninterface Props {\r\n  WidgetDefProvider?: {\r\n    Component: React.FC<WidgetDefProviderProps>;\r\n    props?: any;\r\n  };\r\n  WidgetDataProvider?: {\r\n    Component: React.FC<WidgetDataProviderProps>;\r\n    props?: any;\r\n  };\r\n  children: any;\r\n  globalPropName: string,\r\n  datastream: string\r\n}\r\n\r\n/**\r\n * Component provides base setup for a GAMS Widget\r\n * like configuration via ajax or local js object.\r\n * Passes configuration and data down to given child\r\n * GAMSWidgetComponent.\r\n * @param WidgetComponent WidgetComponent to be passed down.\r\n * @param WidgetDefProvider Component that handles the \"request\" / \"get\" for the Widget's configuration\r\n * @param WidgetDataProvider Component that handles the \"request\" / \"get\" for the Widget's data.\r\n */\r\nconst GamsWidget: React.FC<Props> = ({\r\n  WidgetDefProvider,\r\n  WidgetDataProvider,\r\n  globalPropName,\r\n  datastream,\r\n  children,\r\n}) => {\r\n  //initial widgetDef state -> set via Definition Provider\r\n  const [widgetDef, setWidgetDef] = React.useState<GamsWidgetType | undefined>(\r\n    undefined\r\n  );\r\n\r\n  // complete merged widget state (with data) -> set by the Data provider\r\n  const [refinedWidgetData, setRefinedWidgetData] = React.useState<\r\n    GamsWidgetType | undefined\r\n  >(undefined);\r\n\r\n  /**\r\n   * Display basic console messages when a widget-Definition\r\n   * is detected.\r\n   */\r\n  React.useEffect(() => {\r\n    //First check if exactly one children hass been passed down.\r\n    if(!React.Children.only(children))throw new TypeError(\"More ore less than one child was passed down to <GamsWidget/>. Please make sure to place exactly one component as GamsWidget component.\");\r\n    if (!widgetDef) return;\r\n\r\n    // message according to set lifecycle etc.\r\n    if (widgetDef.lifecycle) {\r\n      if (\r\n        widgetDef.lifecycle === \"develop\" ||\r\n        widgetDef.lifecycle === \"production\"\r\n      )\r\n        console.debug(\r\n          \"GamsWidget: WidgetDefinition's lifecycle was configured as:'\",\r\n          widgetDef.lifecycle,\r\n          \"' Set the lifecycle to 'deploy' if you want to remove the console messages.\"\r\n        );\r\n    } else {\r\n      console.debug(\r\n        \"GamsWidget: WidgetDefinition's lifecycle not set. Defaulting to:'develop'. Set the lifecycle to 'deploy' if you want to remove the console messages.\"\r\n      );\r\n    }\r\n  }, [widgetDef]);\r\n\r\n  return (\r\n    <>\r\n      {/**\r\n        * First, just call given component\r\n        * - the \"data\" property is undefined as long as data is not loaded.\r\n        * - enriched widget data is passed down (enriched voa WidgetDefProvider and DataProvider)\r\n        */}   \r\n        {React.cloneElement(children, { widgetDef: refinedWidgetData })}\r\n\r\n\r\n      {\r\n        /**\r\n         * 01. Render component that handles loading \r\n         * of widget base definition. Like GUI and \r\n         * general.\r\n         * - might be a custom component given as prop.\r\n         */\r\n      }\r\n      {WidgetDefProvider ? (\r\n        <WidgetDefProvider.Component\r\n          {...WidgetDefProvider.props}\r\n          globalPropName={globalPropName}\r\n          datastream={datastream}\r\n          setDefinition={setWidgetDef}\r\n        />\r\n      ) : (\r\n        <DefaultWidgetDefProvider setDefinition={setWidgetDef} globalPropName={globalPropName} datastream={datastream}/>\r\n      )}\r\n\r\n       {/**\r\n        * 02. Component for getting the widget's data \r\n        * - like a chunk of json data for rendering bar charts etc.\r\n        * - could also be a custom component.\r\n        */}\r\n      {widgetDef ? (\r\n        WidgetDataProvider ? (\r\n          <WidgetDataProvider.Component\r\n            widgetDef={widgetDef}\r\n            setWidgetData={setRefinedWidgetData}\r\n            {...WidgetDataProvider.props}\r\n          />\r\n        ) : (\r\n          <DefaultDataProvider\r\n            widgetDef={widgetDef}\r\n            setWidgetData={setRefinedWidgetData}\r\n          />\r\n        )\r\n      ) : null}\r\n\r\n       \r\n    </>\r\n  );\r\n};\r\n\r\nexport default GamsWidget;\r\n\r\n// GamsWidget Type\r\n\r\n// object of kind given to gamsJs?\r\n// e.g. like: gamsJs.inject.toggableSidebar({lifecycle: ...})  ---> widget config provided by gamsJs directly?  (as JSON?)\r\n// OR: gamsJs.inject.toggableSidebar()                         ---> widget config provided by datastream? (as e.g. XML)\r\nexport interface GamsWidgetType {\r\n  lifecycle?: \"develop\" | \"production\" | \"deploy\"; // defaults to develop --> message to set development mode!\r\n  name?: string; // method call in gamsJs specifies widget name. ()\r\n  description?: string; // description for the widget.\r\n  intent?: string; // description of the widget should've been used.\r\n  gui?: any; // configuration comes always(?) from the current pid. Must be handled in gamsJs not here specifically.\r\n\r\n  // arbitray data structure for the widget to use\r\n  // can define widget's data directly here\r\n  // the data provider will write fetched data onto here.\r\n  data?: any;\r\n\r\n  // not every widget needs data to work (labels)\r\n  // buttons etc. are nested inside \"gui\"\r\n  // allow multiple sources and therefore merging on client side\r\n  dataSourcesSpec?: {\r\n    // for flexibility reasons type is specified inside sources BUT:\r\n    // all sources must be of same type atm.\r\n    // otherwise the data merging process would be difficult.\r\n    // data needs to be guaranteed of same type -> otherwise crash!\r\n    sources: GamsWidgetDataSource[];\r\n  };\r\n}\r\n\r\nexport interface GamsWidgetDataSource {\r\n  // best default would be to call current pid and service!\r\n  // (but difficult -> cannot know current content model)\r\n  gamsDigitalObj?: {\r\n    pid?: string; // defaults undefined -> assume that current pid should be requested.\r\n    datastream?: string; // defaults undefined -> assuming service to call. (and not a datstream of the object)\r\n    service?: string; //                    -> ignored by standard\r\n    contentModel:\r\n      | \"TEI\"\r\n      | \"GML\"\r\n      | \"Query\"\r\n      | \"Context\"\r\n      | \"R\"\r\n      | \"LIDO\"\r\n      | \"Ontology\"\r\n      | \"SKOS\";\r\n  };\r\n  api?: {\r\n    url: string;\r\n  };\r\n  global?: {\r\n    propertyName?: string;\r\n  };\r\n}\r\n","import React from \"react\";\r\n\r\ninterface Props {\r\n  value: string;\r\n  storageKey: string;\r\n  children: any;\r\n  onChange: (val: string) => void;\r\n}\r\n\r\n//TODO jsdoc\r\nconst LocalStorageApplier: React.FC<Props> = ({\r\n  children,\r\n  value,\r\n  storageKey,\r\n  onChange\r\n}) => {\r\n\r\n  React.useEffect(() => {\r\n    let storageVal = localStorage.getItem(storageKey);\r\n    if (storageVal === null) storageVal = \"\";\r\n    if (onChange) onChange(storageVal);\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    localStorage.setItem(storageKey, value);\r\n  }, [value]);\r\n\r\n  return <>{children}</>;\r\n};\r\n\r\nexport default LocalStorageApplier;\r\n","import React from \"react\";\r\nimport LocalStorageApplier from \"../LocalStorageApplier\";\r\n\r\ninterface Props {\r\n  onChange: (value: string) => void;\r\n  value: string;\r\n  localStorageKey: string;\r\n  options: { label: string; value: string }[];\r\n  placeHolder?: string;\r\n  prepend?: string;\r\n  [properties: string]: any;  //properties are spread onto the <select> element.\r\n}\r\n\r\nconst StorageSelect: React.FC<Props> = ({\r\n  onChange,\r\n  value,\r\n  options,\r\n  localStorageKey,\r\n  placeHolder = undefined,\r\n  prepend,\r\n  ...properties\r\n}) => {\r\n\r\n  // auto set first value of the dropdown as default.\r\n  React.useEffect(() => {\r\n    // when a placeholder is given do nothing!\r\n    if(placeHolder)return;\r\n    // when no value is passed from two-way binding also do not assign default.\r\n    // if there is a local storage value it will be read out later in rendering.\r\n    if(!value)return; \r\n    // call onchange.\r\n    onChange(options[0].value);\r\n  }, [placeHolder]);\r\n\r\n\r\n  return (\r\n    <>\r\n      {\r\n        <LocalStorageApplier\r\n          onChange={(val) => onChange(val)}\r\n          storageKey={localStorageKey}\r\n          value={value}\r\n        >\r\n          <div className=\"input-group mb-3\">\r\n          {prepend ? <div className=\"input-group-prepend\">\r\n      <span className=\"input-group-text\" id=\"basic-addon1\">{prepend}</span>\r\n          </div> : null}\r\n          <select\r\n            value={value}\r\n            onChange={evt => onChange(evt.currentTarget.value)}\r\n            {...properties}\r\n          >\r\n            {/**\r\n             * When placeholder is undefined take the first value of options\r\n             * as default value.\r\n             */}\r\n            {placeHolder ? (\r\n              <option key={`SelectFormGroup_option_-1`} value=\"\" disabled hidden>\r\n                {placeHolder}\r\n              </option>\r\n            ) : (\r\n              <option key={`SelectFormGroup_option_-1`} value={options[0].value} disabled hidden>\r\n                {options[0].label}\r\n              </option>\r\n            )}\r\n\r\n            {options.map((option, index) => (\r\n              <option\r\n                key={`SelectFormGroup_option_${index}`}\r\n                value={option.value}\r\n              >\r\n                {option.label}\r\n              </option>\r\n            ))}\r\n          </select></div>\r\n        </LocalStorageApplier>\r\n      }\r\n    </>\r\n  );\r\n};\r\n\r\nexport default StorageSelect;\r\n","import React from \"react\";\r\nimport { SelectInput } from \"../../../@types/types\";\r\nimport StorageSelect from \"../StorageSelect\";\r\n\r\ninterface props {\r\n  options: SelectInput;\r\n  onChange: (value: string) => void;\r\n  localStorageKey: string;\r\n}\r\n\r\n\r\n//TODO add jsdoc\r\nconst SelectFormGroup: React.FC<props> = ({\r\n  options,\r\n  onChange,\r\n  localStorageKey\r\n}) => {\r\n  // search for the corresponding value according to _selected property.\r\n  const [selectedVal, setSelectedVal] = React.useState<string>(() => {\r\n    let filtered = options.value.filter(val => val._selected === true);\r\n    return filtered.length > 0 ? (filtered[0].value as string) : \"\";\r\n  });\r\n\r\n  const handleSelection = (value: string) => {\r\n    //set selection intern - string of value.\r\n    setSelectedVal(value);\r\n\r\n    //communicate to above selection \r\n    let filtered = options.value.filter(val => val.value === value);\r\n    let matched = filtered.length > 0 ? (filtered[0].value as string) : \"\";\r\n    onChange(matched);\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-group tripleform--selectformgroup\">\r\n      {options.label ? <label>{options.label}</label> : null}\r\n      <StorageSelect\r\n        localStorageKey={localStorageKey}\r\n        onChange={(val)=>handleSelection(val)}\r\n        useLocaleStorage={true}\r\n        options={options.value as {label: string, value: string}[]}\r\n        value={selectedVal}\r\n        // following props are spread to <select>\r\n        placeHolder={options.placeHolder}\r\n        className=\"form-control\"\r\n        required={options.required}\r\n        prepend={options.prepend}\r\n      ></StorageSelect>\r\n      {options.small ? (\r\n        <small className=\"form-text text-muted\">{options.small}</small>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectFormGroup;\r\n","import React from \"react\";\r\nimport LocalStorageApplier from \"../LocalStorageApplier\";\r\n\r\ninterface props {\r\n  onChange: (value: string) => void;\r\n  value: string;\r\n  localStorageKey: string;\r\n  [properties: string]: any;\r\n}\r\n\r\nconst StorageInput: React.FC<props> = ({\r\n  onChange,\r\n  value,\r\n  localStorageKey,\r\n  ...properties\r\n}) => {\r\n  return (\r\n    <>\r\n      <LocalStorageApplier\r\n        storageKey={localStorageKey}\r\n        value={value}\r\n        onChange={val => onChange(val)}\r\n      >\r\n        <input\r\n          onChange={evt => onChange(evt.currentTarget.value)}\r\n          value={value}\r\n          {...properties} //spreads any further given properties\r\n        ></input>\r\n      </LocalStorageApplier>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default StorageInput;\r\n","import React from \"react\";\r\nimport { TextInput } from \"../../../@types/types\";\r\nimport LocalStorageInput from \"../StorageInput\";\r\n\r\ninterface props {\r\n    options: TextInput;\r\n    onChange: (value: string) => void;\r\n    localStorageKey: string\r\n}\r\n\r\nconst TextFormGroup: React.FC<props> = ({options, onChange, localStorageKey}) => {\r\n\r\n    const [value, setValue] = React.useState<string>(options.value);\r\n\r\n    React.useEffect(()=>{\r\n        if(value === undefined || value === \"undefined\" || value === null)return;\r\n        onChange(value);\r\n    }, [value]);\r\n\r\n    //small runtime validation to run only on mount\r\n    React.useEffect(() => {\r\n      if (options.type !== \"text\"){\r\n        throw new TypeError(\r\n            `Tried to generate a textInputFormGroup, which type is not set to 'text'. Input with label: ${options.label}`);}\r\n      \r\n      if (typeof options.value !== \"string\"){\r\n        throw new TypeError(\r\n        `You have to pass in a string, when the input type is set to 'text'. Error at input with label: ${options.label}`\r\n      )}\r\n    }, []);\r\n\r\n    return (\r\n    <div className=\"form-group tripleform--textformgroup\">\r\n        { options.label ? <label>{options.label}</label> : null}\r\n        <LocalStorageInput\r\n          localStorageKey={localStorageKey}\r\n          required={options.required}\r\n          className=\"form-control\"\r\n          type=\"text\"\r\n          id={options.id}\r\n          placeholder={options.placeHolder}\r\n          value={options.value}\r\n          onChange={val => setValue(val)}\r\n        ></LocalStorageInput>\r\n        {options.small ? <small className=\"form-text text-muted\">{options.small}</small> : null}\r\n    </div>); \r\n}\r\n\r\n\r\nexport default TextFormGroup;","import React from \"react\";\r\nimport Autosuggest from \"react-autosuggest\";\r\nimport { AutcompleteInput } from \"../../../@types/types\";\r\nimport LocalStorageApplier from \"../LocalStorageApplier\"\r\n\r\ninterface Props {\r\n  id: string;\r\n  autoCompleteOption: AutcompleteInput;\r\n  onchange: (evt: any) => void;\r\n  localStorageKey: string;\r\n}\r\n\r\nconst AutoComplete: React.FC<Props> = ({\r\n  id,\r\n  autoCompleteOption,\r\n  onchange,\r\n  localStorageKey,\r\n}) => {\r\n  const [value, setValue] = React.useState<string>(()=>{\r\n    let filtered = autoCompleteOption.value.filter(val=>(val._selected===true));\r\n      return filtered.length > 0 ? filtered[0].label as string : \"\";\r\n  });\r\n\r\n  const [typedIn, setTypedIn] = React.useState<string>(value);\r\n\r\n  //needs to be let because getter has to be set!\r\n  let [suggestions, setSuggestions] = React.useState<string[]>([]);\r\n\r\n  const getSuggestions = (typedValue: string) => {\r\n    setTypedIn(typedValue); // sets a state where typed in value is stored.\r\n    \r\n    //sets the input to empty when clicked on\r\n    if(typedValue===value){\r\n      onchange(undefined);  //resect selection for \"component above\";\r\n      setValue(\"\");         //clear input\r\n    };\r\n\r\n    const inputValue = typedValue.trim().toLowerCase();\r\n    const inputLength = inputValue.length;\r\n    if(typedValue===\"*\")return autoCompleteOption.value;\r\n    return inputLength === 0\r\n      ? []\r\n      : autoCompleteOption.value.filter(\r\n          lang => lang.label ? (lang.label.toLowerCase().slice(0, inputLength) === inputValue) : undefined\r\n        );\r\n  };\r\n\r\n  // When suggestion is clicked, Autosuggest needs to populate the input\r\n  // based on the clicked suggestion. Teach Autosuggest how to calculate the\r\n  // input value for every given suggestion.\r\n  const getSuggestionValue = (suggestion: any) => {\r\n    return suggestion.label;\r\n  };\r\n\r\n  // Use your imagination to render suggestions.\r\n  const renderSuggestion = (suggestion: any) => {\r\n    let typedInLength = typedIn.length;\r\n    return (\r\n      <div>\r\n        <span style={{ color: \"red\" }}>{suggestion.label.substring(0,typedInLength)}</span>\r\n        <span>{suggestion.label.substring(typedInLength, suggestion.label.length)}</span>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const onChange = (event: any, { newValue }: any) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  React.useEffect(() => { \r\n    if (!value) return;\r\n    let obj = autoCompleteOption.value.filter(val => val.label === value);\r\n    if (!obj[0]) return;\r\n    if (onchange) onchange(obj[0].value);\r\n  }, [value]);\r\n\r\n  // Autosuggest will call this function every time you need to update suggestions.\r\n  // You already implemented this logic above, so just use it.\r\n  const onSuggestionsFetchRequested = ({ value }: any) => {\r\n    //setting getter method to be handled inside the autosuggest\r\n    //@ts-ignore\r\n    suggestions = getSuggestions(value);\r\n    let newSugs = Array.from(suggestions);\r\n    setSuggestions(() => newSugs);\r\n  };\r\n\r\n  // Autosuggest will call this function every time you need to clear suggestions.\r\n  const onSuggestionsClearRequested = () => {\r\n    setSuggestions([]);\r\n  };\r\n\r\n  const inputProps = {\r\n    placeholder: autoCompleteOption.placeHolder,\r\n    value,\r\n    onChange: onChange\r\n  };\r\n\r\n  const renderInputComponent = (inputProps: any) => (\r\n    <div className=\"tripleform--autocomplete-formgroup form-group\">\r\n      {autoCompleteOption.label ? (\r\n        <>\r\n          <label> {autoCompleteOption.label} </label>\r\n          <br></br>\r\n        </>\r\n      ) : null}\r\n      {autoCompleteOption.required ? (\r\n        <>\r\n        <div className=\"input-group mb-3 autocomplete--input-group\">\r\n          { autoCompleteOption.prepend ? <div className=\"input-group-prepend\">\r\n            <span className=\"input-group-text\" id=\"basic-addon1\">{autoCompleteOption.prepend}</span>\r\n        </div> : null}\r\n        <input\r\n          className=\"form-control\"\r\n          style={{\r\n            borderBottom: `${\r\n              autoCompleteOption.value.filter(selObj => selObj.label === value)\r\n                .length !== 0\r\n                ? \"\"\r\n                : \"2px solid #dc3545\"\r\n            }`\r\n          }}\r\n          type=\"text\"\r\n          {...inputProps}\r\n        /></div>\r\n        {autoCompleteOption.small ? <small className=\"form-text text-muted\">{autoCompleteOption.small}</small> : null}\r\n        </>\r\n      ) : (<>\r\n      <div className=\"input-group mb-3 autocomplete--input-group\">\r\n        { autoCompleteOption.prepend ? <div className=\"input-group-prepend\">\r\n            <span className=\"input-group-text\" id=\"basic-addon1\">{autoCompleteOption.prepend}</span>\r\n        </div> : null}\r\n        <input\r\n          className=\"form-control\"\r\n          style={{ border: `1px solid #28a745` }}\r\n          type=\"text\"\r\n          {...inputProps}\r\n        /></div>\r\n        {autoCompleteOption.small ? <small className=\"form-text text-muted\">{autoCompleteOption.small}</small> : null}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <LocalStorageApplier\r\n      onChange={val => setValue(val)}\r\n      value={value}\r\n      storageKey={localStorageKey}\r\n    >\r\n        <Autosuggest\r\n          id={id}\r\n          suggestions={suggestions}\r\n          onSuggestionsFetchRequested={onSuggestionsFetchRequested}\r\n          onSuggestionsClearRequested={onSuggestionsClearRequested}\r\n          getSuggestionValue={getSuggestionValue}\r\n          renderSuggestion={renderSuggestion}\r\n          inputProps={inputProps}\r\n          renderInputComponent={renderInputComponent}\r\n        />\r\n    </LocalStorageApplier>\r\n  );\r\n};\r\n\r\nexport default AutoComplete;\r\n","\r\n\r\n/**\r\n * Uses JSON.parse and JSON.stringify to generate \r\n * a deep copy of given value.\r\n * @param {Object | Array<any>} value Object or Array to copy deep.\r\n * @returns {Object | Array<any>} deep copy of given Object or Array.\r\n */\r\nconst copyDeep = (value: Object | Array<any>) => {\r\n    return JSON.parse(JSON.stringify(value));\r\n}\r\n\r\nexport default {copyDeep};","\r\n\r\n/**\r\n * Deletes all values from the local storage and reloads the current url.\r\n */\r\nconst resetStorageReloadPage = () => {\r\n  localStorage.clear(); \r\n  window.location.reload();\r\n}\r\n\r\n\r\nexport const navigationUtils = {\r\n  resetStorageReloadPage\r\n}\r\n","import React from \"react\";\r\nimport SelectFormGroup from \"../SelectFormGroup/index\";\r\nimport TextFormGroup from \"../TextFormGroup\";\r\nimport {\r\n  Input,\r\n  SelectInput,\r\n  TextInput,\r\n  AutcompleteInput,\r\n  RestPathVariableGroup,\r\n  SelectValue\r\n} from \"../../../@types/types\";\r\nimport Autocomplete from \"../Autocomplete\";\r\nimport zimUtils from \"../../../utils/utils\";\r\nimport { navigationUtils } from \"../../../utils/navigation\";\r\n\r\ninterface Props {\r\n  restPathGroups: RestPathVariableGroup[];\r\n  inputIsValid: boolean | undefined;\r\n  setInputFields?: Function;\r\n  handleSearch: (\r\n    btnClickEvent: React.MouseEvent<HTMLButtonElement, MouseEvent>\r\n  ) => void;\r\n  loading?: boolean;\r\n  searchBtns?: {\r\n    searchText: string,\r\n    resetText: string\r\n}\r\n}\r\n\r\nconst ResponsiveForm: React.FC<Props> = ({\r\n  restPathGroups,\r\n  inputIsValid,\r\n  setInputFields,\r\n  handleSearch,\r\n  loading = undefined,\r\n  searchBtns\r\n}) => {\r\n  const generateTextFormGroup = (\r\n    textInput: TextInput,\r\n    inputFieldsIntern: Input[]\r\n  ): JSX.Element | TypeError => {\r\n    let keyId = `responsiveForm_TextFormGroup_${inputFieldsIntern.indexOf(\r\n      textInput\r\n    )}_${textInput.id}`;\r\n    return (\r\n      <TextFormGroup\r\n        key={keyId}\r\n        localStorageKey={keyId}\r\n        options={textInput}\r\n        onChange={value => onFormGroupChange(value, textInput)}\r\n      ></TextFormGroup>\r\n    );\r\n  };\r\n\r\n  const generateSelectFormGroup = (\r\n    selectInput: SelectInput,\r\n    inputGroups: Input[]\r\n  ): JSX.Element | TypeError => {\r\n    //first runtime validation\r\n    runtimeValidateSelect(selectInput);\r\n    let keyId = `ResponsiveForm_SelectFormGroup_${inputGroups.indexOf(\r\n      selectInput\r\n    )}_${selectInput.id}`;\r\n    return (\r\n      <SelectFormGroup\r\n        key={keyId}\r\n        localStorageKey={keyId}\r\n        options={selectInput}\r\n        onChange={value => onFormGroupChange(value, selectInput)}\r\n      />\r\n    );\r\n  };\r\n\r\n  const generateAutoCompleteFormGroup = (\r\n    selectInput: AutcompleteInput,\r\n    inputGroups: Input[]\r\n  ) => {\r\n    //first runtime validation\r\n    runtimeValidateSelect(selectInput);\r\n    let keyId = `ResponsiveForm_AutoComplete_${inputGroups.indexOf(\r\n      selectInput\r\n    )}_${selectInput.id}`;\r\n    return (\r\n      <Autocomplete\r\n        id={`${Math.random() * 1000}`}\r\n        key={keyId}\r\n        autoCompleteOption={selectInput as AutcompleteInput}\r\n        onchange={value => onFormGroupChange(value, selectInput)}\r\n        localStorageKey={keyId}\r\n      ></Autocomplete>\r\n    );\r\n  };\r\n\r\n  const onFormGroupChange = (\r\n    value: string,\r\n    selectInput: AutcompleteInput | SelectInput | TextInput\r\n  ) => {\r\n    //when the type is text input need different procedure\r\n    if (selectInput.type === \"text\") {\r\n      //assign to intern input fields given value from input field\r\n      selectInput.value = value;\r\n      let formGroupsCopy = zimUtils.copyDeep(restPathGroups); //generates a deep copy of state\r\n      return setInputFields ? setInputFields(() => formGroupsCopy) : null;\r\n    }\r\n\r\n    //case type is 'autocomplete' or 'select'\r\n\r\n    //sets the _selected property to true from element linked\r\n    //and others to false.\r\n    let valueObjects: SelectValue[] = [...selectInput.value];\r\n    valueObjects.forEach(select => (select._selected = select.value === value));\r\n\r\n    //copy then set state (for resetting state errors`?)\r\n    let formGroupsCopy = zimUtils.copyDeep(restPathGroups); //generates a deep copy of state\r\n    return setInputFields ? setInputFields(() => formGroupsCopy) : null;\r\n  };\r\n\r\n  const runtimeValidateSelect = (\r\n    selectInput: AutcompleteInput | SelectInput\r\n  ): void | TypeError => {\r\n    //first runtime validation\r\n    if (typeof selectInput.value !== \"object\")\r\n      throw new TypeError(\r\n        `You have to pass in an array of objects if selected type of input is 'select'. Given input-label: ${selectInput.label}`\r\n      );\r\n    if (!Array.isArray(selectInput.value))\r\n      throw new TypeError(\r\n        `You have to pass in an array of objects if selected type of input is 'select'. Given input-label: ${selectInput.label}`\r\n      );\r\n    if (!selectInput.value[0].label || !selectInput.value[0].value)\r\n      throw new TypeError(\r\n        `You have to pass in an array of objects if selected type of input is 'select'. Given input-label: ${selectInput.label}`\r\n      );\r\n  };\r\n\r\n  //state and useeffect only needed to make form fade in on render\r\n  const [formOpacity, setFormOpacity] = React.useState<number>(0);\r\n  React.useEffect(() => {\r\n    let opacity = 0;\r\n    let interval = setInterval(() => {\r\n      opacity = opacity + 0.1;\r\n      setFormOpacity(opacity);\r\n      if (opacity > 1) clearInterval(interval);\r\n    }, 40);\r\n  }, []);\r\n\r\n  return (\r\n    //generate form with adequate defined form-groups.\r\n    <form\r\n      className=\"was-validated responsiveform\"\r\n      style={{ opacity: formOpacity }}\r\n    >\r\n      {//first iterate over different pathVarGroups\r\n      restPathGroups.map((pathVarGroup: RestPathVariableGroup) => {\r\n        //then over individual linked formgroups = Input type\r\n        return (\r\n          <div className=\"responsive-form--form-block\">\r\n            {\" \"}\r\n            {pathVarGroup.formGroups.map(input => {\r\n              if (input.type === \"text\") {\r\n                return generateTextFormGroup(\r\n                  input as TextInput,\r\n                  pathVarGroup.formGroups\r\n                );\r\n              }\r\n              if (input.type === \"select\") {\r\n                return generateSelectFormGroup(\r\n                  input as SelectInput,\r\n                  pathVarGroup.formGroups\r\n                );\r\n              }\r\n              if (input.type === \"autocomplete\") {\r\n                return generateAutoCompleteFormGroup(\r\n                  input as AutcompleteInput,\r\n                  pathVarGroup.formGroups\r\n                );\r\n              }\r\n            })}\r\n          </div>\r\n        );\r\n      })}\r\n      <div className=\"responsive-form--form-block responsive-form--button-block\">\r\n        <button\r\n          className={`btn ${inputIsValid ? \"btn-success\" : \"btn-warning\"}`}\r\n          onClick={evt => handleSearch(evt)}\r\n        >\r\n          {searchBtns ? searchBtns.searchText : \"Suche\"}\r\n        </button>\r\n        <button className=\"btn btn-light\" onClick={(evt) =>  {evt.preventDefault(); navigationUtils.resetStorageReloadPage()} }>{searchBtns ? searchBtns.resetText : \"Suche zurücksetzen\"}</button>\r\n        <div\r\n          className=\"spinner-border tripleform--spinner\"\r\n          style={{ visibility: loading ? \"inherit\" : \"hidden\" }}\r\n          role=\"status\"\r\n        ></div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ResponsiveForm;\r\n","import React from \"react\";\r\ninterface props {\r\n  queryStart: string;\r\n  query: string;\r\n  paramDelimiter: string;\r\n}\r\n\r\nconst QueryBuilder: React.FC<props> = ({\r\n  queryStart,\r\n  query,\r\n  paramDelimiter\r\n}) => {\r\n  return (\r\n    <div className={`container`}>\r\n      <br></br>\r\n      <h4>Query Build Helper</h4>\r\n      <p>\r\n        (set lifecycle to \"deploy\" to deactivate builder) <br></br>\r\n        <br></br>Query-Start: <br></br>\r\n        {queryStart}\r\n      </p>{\" \"}\r\n      <hr></hr>\r\n      <p>\r\n        Decoded: <br></br> {query}\r\n      </p>{\" \"}\r\n      <hr></hr>\r\n      <p>\r\n        Encoded:<br></br> {encodeURIComponent(query)}\r\n      </p>{\" \"}\r\n      <hr></hr>\r\n      <p>\r\n        Given parameter-delimiter:<br></br> {paramDelimiter}\r\n      </p>{\" \"}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QueryBuilder;\r\n","import React from \"react\";\r\nimport ResponsiveForm from \"../../common/ResponsiveForm\";\r\nimport QueryBuilder from \"../QueryBuilder\"\r\nimport {\r\n  QueryInput,\r\n  SelectValue,\r\n  TripleForm,\r\n  RestPathVariableGroup\r\n} from \"../../../@types/types\";\r\nimport { copyDeep } from \"../../../utils/gamsUtils\";\r\n\r\nimport { GAMSWidgetProps } from \"../../common/GamsWidget\";\r\n// extending the prop-type of the GamsWidgetComponent\r\ninterface GAMSTripleFormProps extends GAMSWidgetProps {\r\n  widgetDef?: TripleForm \r\n}\r\n\r\n\r\nconst TripleFormReact: React.FC<GAMSTripleFormProps> = ({\r\n  widgetDef\r\n}) => {\r\n  \r\n  //state constructs the query string\r\n  const [query, setQuery] = React.useState<\"\" | string>(\"\");\r\n\r\n  // copy of widgetdef.gui.params\r\n  // RestpathVariable type is manipulated by user -> React needs that for two-way binding.\r\n  const [queryInputs, setInputs] = React.useState<\r\n    RestPathVariableGroup[] | undefined\r\n  >(undefined);\r\n\r\n  const [inputIsValid, setInputIsValid] = React.useState<boolean | undefined>(\r\n    undefined\r\n  );\r\n  const [loading, setLoading] = React.useState<boolean>(false);\r\n\r\n  // initial useEffect to copy data structure inside the gui.\r\n  React.useEffect(() => {\r\n    if(!widgetDef)return;\r\n    if(!widgetDef.gui)return;\r\n    setInputs(copyDeep(widgetDef.gui.params));\r\n  }, [widgetDef]);\r\n\r\n  //Use Effect build the query as url string\r\n  React.useEffect(() => {\r\n    if(!widgetDef)return;\r\n    if (!queryInputs) return;\r\n    let query = \"\";\r\n\r\n    //delimiter set in widgetDefinition\r\n    if(!widgetDef.gui)return;\r\n    let paramDelimiter = widgetDef.gui.parameterDelimiter;\r\n\r\n    queryInputs.forEach(restVargroup => {\r\n      if (query.includes(restVargroup.restPathVariable))\r\n        throw new TypeError(\r\n          `Found RestPathVariable a second time: ${restVargroup.restPathVariable}`\r\n        );\r\n      if (query === \"undefined\" || !query) {\r\n        query = `${restVargroup.restPathVariable}=`;\r\n      } else {\r\n        query += `&${restVargroup.restPathVariable}=`;\r\n      }\r\n\r\n      restVargroup.formGroups.forEach((queryInput, inputObjIndex) => {\r\n        //check which type queryInput has\r\n        if (queryInput.type === \"text\") {\r\n          query += `${inputObjIndex === 0 ? \"\" : paramDelimiter}${\r\n            queryInput.parameter\r\n          }${queryInput.value}`;\r\n        }\r\n\r\n        //check if type is queryInput or autocomplete\r\n        if (\r\n          queryInput.type === \"select\" ||\r\n          queryInput.type === \"autocomplete\"\r\n        ) {\r\n          //if array\r\n          if (Array.isArray(queryInput.value)) {\r\n            (queryInput.value as SelectValue[]).forEach(inputObj => {\r\n              //if _selected property set to true\r\n              if (inputObj._selected === true) {\r\n                query += `${inputObjIndex === 0 ? \"\" : paramDelimiter}${\r\n                  queryInput.parameter\r\n                }${inputObj.value}`;\r\n              }\r\n            });\r\n          } else {\r\n            throw new TypeError(\r\n              `Encountered a not array type inside an queryInput marked as 'select'. Input's label is: ${queryInput.label}`\r\n            );\r\n          }\r\n        }\r\n      });\r\n    });\r\n    if (query === \"undefined\") return setQuery(\"\");\r\n    setQuery(query);\r\n  }, [queryInputs]);\r\n\r\n  //validates when query changes.\r\n  //sets inputIsValid state to true | false.\r\n  React.useEffect(() => {\r\n    if(!widgetDef)return;\r\n    if (!queryInputs) return;\r\n    try {\r\n      queryInputs.forEach(restPathGroup => {\r\n        restPathGroup.formGroups.forEach(formGroup => {\r\n          if (!formGroup.value && formGroup.required) throw new TypeError();\r\n          if (Array.isArray(formGroup.value) && formGroup.required) {\r\n            let oneIsTrue = false;\r\n            formGroup.value.forEach(input => {\r\n              if (input._selected === true) oneIsTrue = true;\r\n            });\r\n            if (!oneIsTrue) throw new TypeError();\r\n          }\r\n        });\r\n      });\r\n      setInputIsValid(true);\r\n    } catch (e) {\r\n      setInputIsValid(false);\r\n    }\r\n  }, [query]);\r\n\r\n  const handleSearch = (\r\n    btnClickEvent: React.MouseEvent<HTMLButtonElement, MouseEvent>\r\n  ) => {\r\n    if(!widgetDef)return;\r\n    btnClickEvent.preventDefault(); //prevents default submit action on form.\r\n    if (!query)\r\n      return alert(\"wählen Sie einen gültigen Wert für die Suche aus.\");\r\n    if (!queryInputs)\r\n      throw new TypeError(\r\n        \"Cannot start a search without any formGroups defined for the tripleForm!\"\r\n      );\r\n    if (!inputIsValid)\r\n      return alert(\r\n        \"Bitte wählen Sie für alle Suchfelder einen gültigen Wert aus.\"\r\n      );\r\n    if(!widgetDef.gui)return;\r\n\r\n    //last navigate to page\r\n    let url = widgetDef.gui.queryStart + query;\r\n    setLoading(true);\r\n    window.location.href = encodeURI(url);\r\n  };\r\n\r\n  return (\r\n    <div className=\"tripleform\">\r\n      {widgetDef && widgetDef.gui && queryInputs ? (\r\n        <>\r\n          <ResponsiveForm\r\n            restPathGroups={queryInputs}\r\n            setInputFields={setInputs}\r\n            handleSearch={handleSearch}\r\n            inputIsValid={inputIsValid}\r\n            loading={loading}\r\n            searchBtns={widgetDef.gui.searchBtns}\r\n          ></ResponsiveForm>\r\n          {/**\r\n           * Display help to construct query via the query builder.\r\n           * see TripleForm type -> only displayed when lifecycle set to develop\r\n           */}\r\n          {(widgetDef.lifecycle) && (widgetDef.lifecycle  === \"develop\") ? (\r\n            <QueryBuilder query={query} queryStart={widgetDef.gui.queryStart} paramDelimiter={widgetDef.gui.parameterDelimiter}/>\r\n          ) : null}\r\n        </>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TripleFormReact;\r\n","import React from \"react\";\r\nimport GamsWidget from \"../common/GamsWidget\";\r\nimport TripleForm from \"./TripleForm\";\r\n\r\nconst TripleFormWidget: React.FC = () => {\r\n  return (\r\n    <GamsWidget\r\n      datastream=\"GAMS_WIDGET_TRIPLEFORM\"\r\n      globalPropName=\"GAMS_WIDGET_TRIPLEFORM\"\r\n    >\r\n      <TripleForm/>\r\n    </GamsWidget>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default TripleFormWidget;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport TripleFormWidget from './components/App';\r\n\r\nReactDOM.render(<TripleFormWidget />, document.getElementById('GAMS_WIDGET_TRIPLEFORM'));"],"sourceRoot":""}