{"version":3,"sources":["utils/gamsUtils.ts","components/common/GamsWidget/DataProvider/index.tsx","components/common/GamsWidget/WidgetDefProvider/index.tsx","components/common/GamsWidget/index.tsx","components/common/PopUp/BackDrop/index.tsx","components/common/PopUp/index.tsx","components/common/FullCalenderComp/index.tsx","components/App/CalendarApp/index.tsx","components/App/index.tsx","index.tsx"],"names":["getCurrentPid","path","window","location","pathname","includes","index","indexOf","slashIndex","slice","length","copyDeep","value","JSON","parse","stringify","DataProvider","widgetDef","setWidgetData","React","useEffect","lifecycle","dataSourcesSpec","console","debug","sources","RangeError","dataSource","checkDataSource","error","gamsDigitalObj","pid","reqUrlStart","origin","reqUrlFull","datastream","service","contentModel","fetch","then","resp","json","widgetDefCopy","data","catch","err","definedProps","Object","values","filter","val","info","WidgetDefProvider","setDefinition","undefined","children","globalPropName","objectPidRef","reqPid","requestUrl","text","e","dummyDef","name","GamsWidget","WidgetDataProvider","useState","setWidgetDef","refinedWidgetData","setRefinedWidgetData","Children","only","TypeError","cloneElement","Component","props","BackDrop","onClick","className","PopUp","visible","togglePopup","properties","FullCalendarComp","calendarEvents","defaultView","defaultDate","Date","now","handleEventClick","calendarEl","document","getElementById","ReferenceError","Calendar","plugins","dayGridPlugin","eventClick","events","render","data-test","id","CalendarApp","popupIsVisible","setPopupIsVisible","popupData","setPopupData","gui","startDate","popUpDataClone","event","extendedProps","handleFullCalendarEventClick","title","list","map","item","key","href","link","CalendarWidget","ReactDOM"],"mappings":"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","file":"static/js/main.1b99e861.chunk.js","sourcesContent":["\r\n\r\n\r\n/**\r\n * Returns the current Digital Object's PID on GAMS\r\n * via reading out the pathname property. \r\n * @returns pid as string.\r\n */\r\nexport const getCurrentPid = (): string => {\r\n\r\n  let path = window.location.pathname;\r\n  let fedoraObjExpr = \"/archive/objects/\";\r\n\r\n  if(path.includes(fedoraObjExpr)){\r\n    let index = path.indexOf(fedoraObjExpr);\r\n    path = path.slice(index + fedoraObjExpr.length, path.length);\r\n    let slashIndex = path.indexOf(\"/\");\r\n    // pid already available \r\n    if (slashIndex === -1) return path;\r\n    return path.slice(0,slashIndex);\r\n    \r\n  //when no archive/objects before  \r\n  } else {\r\n    path = path.slice(1,path.length); //remove first '/'\r\n    let slashIndex = path.indexOf(\"/\");\r\n\r\n    // in case no further path specification\r\n    // rest params etc. would not be inside window.location.pathname.\r\n    if(slashIndex === -1) return path;\r\n    return path = path.slice(0, slashIndex);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Returns value of the 'locale' RestPathVariable. \r\n * If not set returns 'de' by default.\r\n * @param localeDefault locale value to be returned when no value is set in url.\r\n * @returns value of locale Rest variable. If not set \r\n * returns 'de' as default value. \r\n */\r\nexport const getLocale = (localeDefault: string = \"de\") => {\r\n  let locale = getRestParam(\"locale\")\r\n  return locale ? locale : localeDefault;\r\n}\r\n\r\n/**\r\n * Uses URL API to read out given RestPathVariable.\r\n * @param Name of the parameter\r\n * @returns Value of RestPathVariable. \r\n */\r\nexport const getRestParam = (paramName: string) => {\r\n  let url = new URL(window.location.href);\r\n  let params = new URLSearchParams(url.searchParams);\r\n  let param = params.get(paramName)\r\n  return param;\r\n}\r\n\r\n/**\r\n * Uses setRestParam to set 'locale' RestPathVariable to given value.\r\n * @param langVal Value 'locale' should have.\r\n */\r\nexport const setLocale = (langVal: string) => {\r\n  setRestParam(\"locale\", langVal);\r\n}\r\n\r\n/**\r\n * Sets specified RestPathVariable to given value \r\n * and sends client to the new url.\r\n * @param paramName Name of RestPathVariable to be set.\r\n * @param value New value for the RestPathVariable.\r\n */\r\nexport const setRestParam = (paramName: string, value: string): void => {\r\n  let url = new URL(window.location.href);\r\n  url.searchParams.set(paramName, value);\r\n  window.location.href = url.href;\r\n}\r\n\r\n/**\r\n * Uses JSON.parse and JSON.stringify to generate \r\n * a deep copy of given value.\r\n * @param {Object | Array<any>} value Object or Array to copy deep.\r\n * @returns {Object | Array<any>} deep copy of given Object or Array.\r\n */\r\nexport const copyDeep = (value: Object | Array<any>) => {\r\n  return JSON.parse(JSON.stringify(value));\r\n}","import React from \"react\";\r\nimport { WidgetDataProviderProps, GamsWidgetDataSource, GamsWidgetType } from \"..\";\r\nimport { getCurrentPid, copyDeep } from \"../../../../utils/gamsUtils\";\r\n\r\n\r\n/**\r\n * Handles the loading of data for a GamsWidget component \r\n * according to the abstract widget specification as JSON Schema.\r\n */\r\nconst DataProvider: React.FC<WidgetDataProviderProps> = ({ widgetDef, setWidgetData }) => {\r\n\r\n  React.useEffect(() => {\r\n    widgetDef.lifecycle = widgetDef.lifecycle ? widgetDef.lifecycle : \"develop\"; \r\n    let lifecycle = widgetDef.lifecycle;\r\n\r\n    // when no dataSpec -> assuming none necessary (e.g. data was directly written inside the data property of the widget).\r\n    //@ts-ignore\r\n    if(widgetDef.dataSourcesSpec){\r\n      //fetch data according to dataSpec\r\n      if(lifecycle === \"develop\") console.debug(\"GamsWidget-DataProvider: dataSourceSpecification provided for the widget: \", widgetDef);\r\n\r\n      //TODO -> loop over all data specs. (not only the first)\r\n      //TODO -> currently only supports json!\r\n      //atm take only first data spec into account\r\n      if(widgetDef.dataSourcesSpec.sources.length > 1)throw new RangeError(\"GamsWidget currently supports exactly one source inside the widgetDef.dataSourceSpec.sources array. Make sure to pass in the correct count.\");\r\n      let dataSource = widgetDef.dataSourcesSpec.sources[0];\r\n      if(!checkDataSource(dataSource))return console.error(\"GamsWidget-DataProvider: Validation of data source object failed. Aborting operations: \", dataSource);\r\n      \r\n      \r\n      //when dataSource is a digital object.\r\n      //following code clause build the correct \"request url\"\r\n      if(dataSource.gamsDigitalObj){\r\n\r\n        // build \"first part\" of url first according to pid definition.\r\n        let pid = dataSource.gamsDigitalObj.pid ? dataSource.gamsDigitalObj.pid : getCurrentPid();\r\n        let reqUrlStart = `${window.location.origin}/archive/objects/${pid}`;\r\n        let reqUrlFull = '';\r\n\r\n        // both defined doesn't make any sense.\r\n        if(dataSource.gamsDigitalObj.datastream && dataSource.gamsDigitalObj.service)return console.error(\"GamsWidget-DataProvider: Got a dataSource object where both a datastream and a service is defined. Please make sure to define either one: \", dataSource);\r\n\r\n        //first case of datastreams (same in every case)\r\n        if(dataSource.gamsDigitalObj.datastream){\r\n          reqUrlFull = reqUrlStart + `/datastreams/${dataSource.gamsDigitalObj.datastream}/content`;\r\n\r\n          // case of service should be called.\r\n        } else {\r\n          \r\n          // call standard service or specified one specific for content model\r\n          switch(dataSource.gamsDigitalObj.contentModel){\r\n            case \"GML\":\r\n              reqUrlFull = reqUrlStart + `/methods/sdef:GML/${dataSource.gamsDigitalObj.service ? dataSource.gamsDigitalObj.service : \"getJSON\"}`;\r\n              break;\r\n            case \"TEI\":\r\n              reqUrlFull = reqUrlStart + `/methods/sdef:TEI/${dataSource.gamsDigitalObj.service ? dataSource.gamsDigitalObj.service : \"get\"}`;\r\n              break;\r\n            case \"Context\":\r\n              reqUrlFull = reqUrlStart + `/methods/sdef:Context/${dataSource.gamsDigitalObj.service ? dataSource.gamsDigitalObj.service : \"get\"}`;\r\n              break;\r\n            case \"Query\":\r\n              reqUrlFull = reqUrlStart + `/methods/sdef:Query/${dataSource.gamsDigitalObj.service ? dataSource.gamsDigitalObj.service : \"getJSON\"}`;\r\n              break;\r\n            default:\r\n              return console.error(\"GamsWidget-DataProvider: Unsupported-ContentModel-Error at building the request url for specified content model: \", dataSource.gamsDigitalObj.contentModel, dataSource);\r\n          }\r\n\r\n        }\r\n\r\n        // when request url correctly built for gamsObject -> start fetch.\r\n        if(lifecycle === \"develop\") console.debug(\"GamsWidget-DataProvider: Sending request for widget data to the dataspecification to: \", reqUrlFull);\r\n        fetch(reqUrlFull).then(resp => {\r\n          resp.json().then(json => {\r\n            let widgetDefCopy: GamsWidgetType = copyDeep(widgetDef);\r\n            widgetDefCopy.data = json;\r\n            if(lifecycle === \"develop\") console.debug(\"GamsWidget-DataProvider: Succesfully got data - setting now data property of widget definition. Got data: \", json);\r\n            setWidgetData(widgetDefCopy);\r\n          }).catch(err => {\r\n            console.error(\"GamsWidget-DataProvider: Error parsing data as JSON from datasource: \", dataSource);\r\n            console.error(err);\r\n          });\r\n          \r\n        }).catch(err => {\r\n            console.error(\"GamsWidget-DataProvider: Error getting data from url: \", reqUrlFull);\r\n            console.error(err);\r\n        });\r\n\r\n      } \r\n\r\n\r\n\r\n    } else {\r\n      if(lifecycle === \"develop\") console.debug(\"GamsWidget-DataProvider: No dataSourceSpec provided for the widget - Assuming not needed for widget definition: \", widgetDef);\r\n      setWidgetData(copyDeep(widgetDef));\r\n    }\r\n  }, [ widgetDef, setWidgetData ]);\r\n\r\n  return null\r\n\r\n}\r\n\r\nexport default DataProvider;\r\n\r\n\r\n\r\n\r\n/**\r\n * Checks if exactly one property of given GamsWidgetDataSource object is defined.\r\n *@param dataSource GamsWidgetDataSource object to be validated. \r\n *@returns True if exactly one property is defined. False if none or multiple are defined.\r\n */\r\nconst checkDataSource = (dataSource: GamsWidgetDataSource): boolean => {\r\n  let definedProps = Object.values(dataSource).filter(val => val ? val : false);\r\n  if(definedProps.length === 1){\r\n    console.info(\"GamsWidget-DataProvider: Validation of Datasource successfull: \", dataSource);\r\n    return true;\r\n  } else if(definedProps.length === 0){\r\n    console.error(\"GamsWidget-DataProvider: All properties of given DataSource validated false. Please make sure to assign one correct property to the given datasource object: \", dataSource);\r\n    return false;\r\n  } else {\r\n    console.error(\"GamsWidget-DataProvider: More than one property is defined in given datasource. Make sure to define only one: \", dataSource);\r\n    return false;\r\n  }  \r\n}","import React from \"react\";\r\nimport { getCurrentPid } from \"../../../../utils/gamsUtils\";\r\nimport { GamsWidgetType } from \"../index\"\r\nimport { WidgetDefProviderProps } from \"..\"\r\n\r\n// Extends WidgetDefProviderProps so that additional \r\n// props can be passed down (on level of <GamsWidget/> call)\r\n// can only be optional properties.\r\ninterface GAMSWidgetDefProps extends WidgetDefProviderProps {\r\n  globalPropName?: string;\r\n  datastream?: string;\r\n  objectPidRef?: string;   // if set to undefined -> assuming current object? via datastream?\r\n                           // widget's that are configured by one specific object?\r\n                           // like a context object.  \r\n}\r\n\r\n/**\r\n * Component checks if and where the global config object was assigned and\r\n * sets state of parent component. (for the configuration / basal widget definition).\r\n * globalProp overwrites datastream -> objectPidRef overwrites default behavior of reqeuesting client's\r\n * current object's pid.\r\n * @param globalPropName Name of the property of the global window object where the widget definition could be held.\r\n * @param datastream Name of datastream where the widget definition could be.\r\n * @param objectPidRef Pid of object from where the widget definition should be requested.\r\n */\r\nconst WidgetDefProvider: React.FC<GAMSWidgetDefProps> = ({\r\n  setDefinition = undefined, \r\n  children = undefined,\r\n  globalPropName,\r\n  datastream,     \r\n  //maybe best to set object reference to \"managed content\" | \"reference\" | \"x\" ? like in cirillo?\r\n  // or contextObject with datastream?\r\n  // or service to call\r\n  objectPidRef\r\n}) => {\r\n  React.useEffect(() => {\r\n    if (!setDefinition) return;\r\n\r\n    // configured window object validates true\r\n    if(window[globalPropName as any]){\r\n      return setDefinition(window[globalPropName as any]);\r\n    } \r\n    \r\n    // window object not defined\r\n    // try to fetch for GUI def in datastream\r\n    // first assign PID.\r\n    let reqPid = objectPidRef ? objectPidRef : getCurrentPid();\r\n\r\n    if(datastream){ \r\n      let requestUrl = `${window.location.origin}/archive/objects/${reqPid}/datastreams/${datastream}/content`  \r\n      // fetch object's widget datastream\r\n      fetch(requestUrl).then(data => {\r\n        data.text().then(text => {\r\n          try {\r\n            setDefinition(JSON.parse(text));\r\n          } catch(e){\r\n            //parse xml to JSON via lib best?\r\n          }\r\n        }).catch(err => {\r\n          console.error(\"GamsWidget- WidgetDefProvider: Error stringifying the datastream at: \", requestUrl);\r\n          console.error(err);\r\n        });\r\n      }).catch(err => {\r\n        console.error(\"GamsWidget- WidgetDefProvider: Error at getting config data from url: \", requestUrl);\r\n        console.error(err);\r\n      })\r\n    } else {\r\n      console.error(\"GamsWidget- WidgetDefProvider: No global window property nor datastream defined for retrieving the widget's definition. Returning dummy-definition instead. (But the app might crash).\");\r\n      let dummyDef: GamsWidgetType  = {\r\n        name:\"Dummy-Test Widget\",\r\n        lifecycle:\"develop\"        \r\n      }\r\n      console.error(\"GamsWidget- WidgetDefProvider: Set dummy definition: \", dummyDef);\r\n      setDefinition(dummyDef);    \r\n    }\r\n\r\n  }, [setDefinition, globalPropName, datastream, objectPidRef]);\r\n\r\n  return children ? children : null;\r\n};\r\n\r\nexport default WidgetDefProvider;\r\n","import React from \"react\";\r\nimport DefaultDataProvider from \"./DataProvider\";\r\nimport DefaultWidgetDefProvider from \"./WidgetDefProvider\";\r\n\r\nexport interface GAMSWidgetProps {\r\n  widgetDef?: GamsWidgetType;\r\n}\r\n\r\n/**\r\n * Definition of props for the WidgetDefProvider.\r\n * The component must set the GamsWidget's widgetDefinition state\r\n * somehow / somewhere. (btw by default GamsWidget uses a component specific to GAMS\r\n * that can be imported from here)\r\n */\r\nexport interface WidgetDefProviderProps {\r\n  setDefinition?: React.Dispatch<\r\n    React.SetStateAction<GamsWidgetType | undefined>\r\n  >;\r\n  [property: string]: any;\r\n  children?: any;\r\n}\r\n\r\n/**\r\n * Definition of props for the WidgetDataProvider.\r\n * The component must set the GamsWidget's widgetData state\r\n * somehow / somewhere. (btw by default GamsWidget uses a component specific to GAMS\r\n * that can be imported from here)\r\n */\r\nexport interface WidgetDataProviderProps {\r\n  widgetDef: GamsWidgetType;\r\n  setWidgetData: React.Dispatch<React.SetStateAction<any>>;\r\n  children?: any;\r\n}\r\n\r\ninterface Props {\r\n  WidgetDefProvider?: {\r\n    Component: React.FC<WidgetDefProviderProps>;\r\n    props?: any;\r\n  };\r\n  WidgetDataProvider?: {\r\n    Component: React.FC<WidgetDataProviderProps>;\r\n    props?: any;\r\n  };\r\n  children: any;\r\n  globalPropName: string,\r\n  datastream: string\r\n}\r\n\r\n/**\r\n * Component provides base setup for a GAMS Widget\r\n * like configuration via ajax or local js object.\r\n * Passes configuration and data down to given child\r\n * GAMSWidgetComponent.\r\n * @param WidgetComponent WidgetComponent to be passed down.\r\n * @param WidgetDefProvider Component that handles the \"request\" / \"get\" for the Widget's configuration\r\n * @param WidgetDataProvider Component that handles the \"request\" / \"get\" for the Widget's data.\r\n */\r\nconst GamsWidget: React.FC<Props> = ({\r\n  WidgetDefProvider,\r\n  WidgetDataProvider,\r\n  globalPropName,\r\n  datastream,\r\n  children,\r\n}) => {\r\n  //initial widgetDef state -> set via Definition Provider\r\n  const [widgetDef, setWidgetDef] = React.useState<GamsWidgetType | undefined>(\r\n    undefined\r\n  );\r\n\r\n  // complete merged widget state (with data) -> set by the Data provider\r\n  const [refinedWidgetData, setRefinedWidgetData] = React.useState<\r\n    GamsWidgetType | undefined\r\n  >(undefined);\r\n\r\n  /**\r\n   * Display basic console messages when a widget-Definition\r\n   * is detected.\r\n   */\r\n  React.useEffect(() => {\r\n    //First check if exactly one children hass been passed down.\r\n    if(!React.Children.only(children))throw new TypeError(\"More ore less than one child was passed down to <GamsWidget/>. Please make sure to place exactly one component as GamsWidget component.\");\r\n    if (!widgetDef) return;\r\n\r\n    // message according to set lifecycle etc.\r\n    if (widgetDef.lifecycle) {\r\n      if (\r\n        widgetDef.lifecycle === \"develop\" ||\r\n        widgetDef.lifecycle === \"production\"\r\n      )\r\n        console.debug(\r\n          \"GamsWidget: WidgetDefinition's lifecycle was configured as:'\",\r\n          widgetDef.lifecycle,\r\n          \"' Set the lifecycle to 'deploy' if you want to remove the console messages.\"\r\n        );\r\n    } else {\r\n      console.debug(\r\n        \"GamsWidget: WidgetDefinition's lifecycle not set. Defaulting to:'develop'. Set the lifecycle to 'deploy' if you want to remove the console messages.\"\r\n      );\r\n    }\r\n  }, [widgetDef]);\r\n\r\n  return (\r\n    <>\r\n      {/**\r\n        * First, just call given component\r\n        * - the \"data\" property is undefined as long as data is not loaded.\r\n        * - enriched widget data is passed down (enriched voa WidgetDefProvider and DataProvider)\r\n        */}   \r\n        {React.cloneElement(children, { widgetDef: refinedWidgetData })}\r\n\r\n\r\n      {\r\n        /**\r\n         * 01. Render component that handles loading \r\n         * of widget base definition. Like GUI and \r\n         * general.\r\n         * - might be a custom component given as prop.\r\n         */\r\n      }\r\n      {WidgetDefProvider ? (\r\n        <WidgetDefProvider.Component\r\n          {...WidgetDefProvider.props}\r\n          globalPropName={globalPropName}\r\n          datastream={datastream}\r\n          setDefinition={setWidgetDef}\r\n        />\r\n      ) : (\r\n        <DefaultWidgetDefProvider setDefinition={setWidgetDef} globalPropName={globalPropName} datastream={datastream}/>\r\n      )}\r\n\r\n       {/**\r\n        * 02. Component for getting the widget's data \r\n        * - like a chunk of json data for rendering bar charts etc.\r\n        * - could also be a custom component.\r\n        */}\r\n      {widgetDef ? (\r\n        WidgetDataProvider ? (\r\n          <WidgetDataProvider.Component\r\n            widgetDef={widgetDef}\r\n            setWidgetData={setRefinedWidgetData}\r\n            {...WidgetDataProvider.props}\r\n          />\r\n        ) : (\r\n          <DefaultDataProvider\r\n            widgetDef={widgetDef}\r\n            setWidgetData={setRefinedWidgetData}\r\n          />\r\n        )\r\n      ) : null}\r\n\r\n       \r\n    </>\r\n  );\r\n};\r\n\r\nexport default GamsWidget;\r\n\r\n// GamsWidget Type\r\n\r\n// object of kind given to gamsJs?\r\n// e.g. like: gamsJs.inject.toggableSidebar({lifecycle: ...})  ---> widget config provided by gamsJs directly?  (as JSON?)\r\n// OR: gamsJs.inject.toggableSidebar()                         ---> widget config provided by datastream? (as e.g. XML)\r\nexport interface GamsWidgetType {\r\n  lifecycle?: \"develop\" | \"production\" | \"deploy\"; // defaults to develop --> message to set development mode!\r\n  name?: string; // method call in gamsJs specifies widget name. ()\r\n  description?: string; // description for the widget.\r\n  intent?: string; // description of the widget should've been used.\r\n  gui?: any; // configuration comes always(?) from the current pid. Must be handled in gamsJs not here specifically.\r\n\r\n  // arbitray data structure for the widget to use\r\n  // can define widget's data directly here\r\n  // the data provider will write fetched data onto here.\r\n  data?: any;\r\n\r\n  // not every widget needs data to work (labels)\r\n  // buttons etc. are nested inside \"gui\"\r\n  // allow multiple sources and therefore merging on client side\r\n  dataSourcesSpec?: {\r\n    // for flexibility reasons type is specified inside sources BUT:\r\n    // all sources must be of same type atm.\r\n    // otherwise the data merging process would be difficult.\r\n    // data needs to be guaranteed of same type -> otherwise crash!\r\n    sources: GamsWidgetDataSource[];\r\n  };\r\n}\r\n\r\nexport interface GamsWidgetDataSource {\r\n  // best default would be to call current pid and service!\r\n  // (but difficult -> cannot know current content model)\r\n  gamsDigitalObj?: {\r\n    pid?: string; // defaults undefined -> assume that current pid should be requested.\r\n    datastream?: string; // defaults undefined -> assuming service to call. (and not a datstream of the object)\r\n    service?: string; //                    -> ignored by standard\r\n    contentModel:\r\n      | \"TEI\"\r\n      | \"GML\"\r\n      | \"Query\"\r\n      | \"Context\"\r\n      | \"R\"\r\n      | \"LIDO\"\r\n      | \"Ontology\"\r\n      | \"SKOS\";\r\n  };\r\n  api?: {\r\n    url: string;\r\n  };\r\n  global?: {\r\n    propertyName?: string;\r\n  };\r\n}\r\n","import React from \"react\";\r\n\r\ninterface Props {\r\n  onClick: () => void;\r\n}\r\n\r\nconst BackDrop: React.FC<Props> = ({ onClick }) => {\r\n  return <div onClick={onClick} className={\"popup-component--popup-backdrop\"}></div>;\r\n};\r\n\r\nexport default BackDrop;\r\n","import React from \"react\";\r\nimport BackDrop from \"./BackDrop\";\r\n\r\ninterface Props {\r\n  visible: boolean;\r\n  togglePopup: () => void;\r\n  children?: any;\r\n  [properties: string]: any;\r\n}\r\n\r\nconst PopUp: React.FC<Props> = ({ visible, togglePopup, children, ...properties }) => {\r\n  return visible ? (\r\n    <>\r\n      <BackDrop\r\n        onClick={togglePopup}\r\n      ></BackDrop>  \r\n      <div\r\n        className=\"popup-component--popup-main\"\r\n        {...properties}\r\n      >\r\n        <span className=\"popup-component--popup-close\" onClick={togglePopup}></span>\r\n        { children }\r\n      </div>\r\n    </>\r\n  ) : null;\r\n};\r\n\r\nexport default PopUp;\r\n","import React from \"react\";\r\n\r\nimport { Calendar } from \"@fullcalendar/core\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\n\r\ninterface Props {\r\n  calendarEvents: any;\r\n  defaultView?: string\r\n  defaultDate?: string\r\n  children?: any;\r\n  handleEventClick?: (info: any) => void;\r\n}\r\n\r\nconst FullCalendarComp: React.FC<Props> = ({\r\n  calendarEvents = undefined,\r\n  defaultView = \"dayGridMonth\",\r\n  defaultDate = Date.now(),\r\n  children = undefined,\r\n  handleEventClick = undefined\r\n}) => {\r\n  React.useEffect(() => {\r\n    let calendarEl = document.getElementById(\"calendar\");\r\n    if (!calendarEl) throw new ReferenceError(\"No Calendar el found!\");\r\n\r\n    let calendar = new Calendar(calendarEl, {\r\n      plugins: [dayGridPlugin],\r\n      defaultView,\r\n      defaultDate,\r\n      eventClick: handleEventClick ? info => handleEventClick(info) : undefined,\r\n      events: calendarEvents\r\n    });\r\n\r\n    calendar.render();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"App\" data-test=\"component-app\">\r\n        {/** \"data-test\" attribute is used for testing purposes.  */}\r\n        <div id=\"calendar\"></div>\r\n      </div>\r\n      {children}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FullCalendarComp;\r\n","import React from \"react\";\r\nimport PopUp from \"../../common/PopUp\";\r\n\r\nimport \"@fullcalendar/core/main.css\";\r\nimport \"@fullcalendar/daygrid/main.css\";\r\n\r\nimport { PopUpData } from \"../../../@types/popup\";\r\n\r\nimport FullCalendarComp from \"../../common/FullCalenderComp\";\r\nimport { GAMSWidgetProps} from \"components/common/GamsWidget\";\r\n\r\nimport { GamsWidgetType } from \"components/common/GamsWidget\";\r\n\r\nexport interface CalendarWidgetType extends GamsWidgetType {\r\n  gui?: {\r\n    startDate:string,\r\n  },\r\n  data?: {\r\n    events: CalendarEvent[]\r\n  }\r\n} \r\n\r\ninterface CalendarEvent {\r\n  title: string, \r\n  start: string, \r\n  end: string, \r\n  borderColor:string,\r\n  backgroundColor:string,\r\n  textColor:string,\r\n}\r\n\r\n\r\n//defined props as Typescript interface\r\ninterface Props extends GAMSWidgetProps {\r\n  widgetDef?: CalendarWidgetType,\r\n  exampleProp?: string\r\n}\r\n\r\n//component declared as of type React Functional component with given generic props type (defined above).\r\nconst CalendarApp: React.FC<Props> = ({widgetDef}) => {\r\n  const [popupIsVisible, setPopupIsVisible] = React.useState<boolean>(false);\r\n  //setting initial popup default data\r\n  const [popupData, setPopupData] = React.useState<PopUpData | undefined>(\r\n    undefined\r\n  );\r\n\r\n\r\n  const handleFullCalendarEventClick = (info: any) => {\r\n    let popUpDataClone: PopUpData = info.event.extendedProps.popupData;\r\n    setPopupData(popUpDataClone);\r\n    setPopupIsVisible(true);\r\n  };\r\n\r\n  return widgetDef && widgetDef.gui ? (\r\n    <>\r\n          <FullCalendarComp\r\n            calendarEvents={widgetDef.data ? widgetDef.data.events : undefined}\r\n            defaultDate={widgetDef.gui.startDate}\r\n            handleEventClick={info => handleFullCalendarEventClick(info)}\r\n          >\r\n            {popupData ? (\r\n              <PopUp\r\n                togglePopup={() => setPopupIsVisible(!popupIsVisible)}\r\n                visible={popupIsVisible}\r\n              >\r\n                <div>\r\n                  <h2>{popupData.title}</h2>\r\n                  <ul>\r\n                    {popupData.list.map((item, index) => (\r\n                      <li key={`${item.text}_${index}`}>\r\n                        <span>{item.text} </span>\r\n                        <a href={item.link.href}>{item.link.text}</a>\r\n                      </li>\r\n                    ))}\r\n                  </ul>\r\n                </div>\r\n              </PopUp>\r\n            ) : null}\r\n          </FullCalendarComp>\r\n    </>\r\n  ) : null;\r\n};\r\n\r\nexport default CalendarApp;\r\n","import React from \"react\";\r\nimport GamsWidget from \"components/common/GamsWidget\"; \r\nimport CalendarApp from \"./CalendarApp\";\r\n\r\nconst CalendarWidget: React.FC = () => {\r\n  return (\r\n    <GamsWidget\r\n      datastream=\"GAMS_WIDGET_CALENDAR\"\r\n      globalPropName=\"GAMS_WIDGET_CALENDAR\"\r\n    > \r\n      <CalendarApp></CalendarApp>\r\n    </GamsWidget>\r\n  )\r\n}\r\n\r\n\r\nexport default CalendarWidget;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport CalendarWidget from './components/App/';\r\n\r\nReactDOM.render(<CalendarWidget />, document.getElementById('GAMS_WIDGET_CALENDAR'));"],"sourceRoot":""}